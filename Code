#import to create histogram
import matplotlib.pyplot as plt


studentlist = {}


class PythonMarksheet:
    """
    Fields: 
    studentID, student_name, test_1, assignment_1, test_2, assignment_2, final_exam, total_mark, final_grade
    """

    def __init__(self, studentID, student_name, test_1, assignment_1, test_2, assignment_2, final_exam):
        self.studentID = studentID
        self.student_name = student_name
        self.test_1 = test_1
        self.assignment_1 = assignment_1
        self.test_2 = test_2
        self.assignment_2 = assignment_2
        self.final_exam = final_exam
        self.total_mark = self.calculate_total_mark()  # Call the method to calculate total mark
        self.final_grade = self.grade_distribution()   # Call the method to calculate and store final grade
    
    #add student
    #studentID as str in case studentID include alphabet
    #need to put (self) after every function....i don't know why. read many times and watch many videos also don't understand. Don't ask me why, i just know it works.
    def option1 (self):
        studentQues = str(input("Input studentID (or 'q' to quit): "))
        if studentQues.lower() == 'q':
            return self.menulist()
        
        else:
            student_name = str(input("Input Student Name:"))
     
    #whole thing here have a ValueError protection against users who insert str value
            while True:
                try:
                    test_1 = int(input("What is the score for 1st test:"))
                    break
                except ValueError:
                    print ("Please enter a integar")         
            
            while True:
                try:
                    assignment_1 = int(input("What is the score for 1st assignment"))
                    break
                except ValueError:
                    print ("Please enter a integar")   
                    
            while True:
                try:
                    test_2 =int(input("What is the score for 2nd test:"))
                    break
                except ValueError:
                    print ("Please enter a integar")
                    
            while True:
                try:
                    assignment_2 = int(input("What is the score for 2nd assignment:"))
                    break
                except ValueError:
                    print ("Please enter a integar")
                    
            while True:
                try:
                    final_exam = int(input("What is the score for final exam:"))
                    break
                except ValueError:
                    print ("Please enter a integar")
            
            
            #assign above score into values
            student = PythonMarksheet(
            studentID = studentQues,
            student_name = student_name,
            test_1 = test_1,
            assignment_1 = assignment_1,
            test_2 = test_2,
            assignment_2 = assignment_2,
            final_exam = final_exam
            )
        
            studentlist[student.studentID] = student
            print (f"Student {student.studentID} Added")
            return self.option1()
    
    
    #search all student score
    def option2 (self):
        if not studentlist:
            print ("No student is in this list. Please add Student details.")
            return (self.menulist())
        else:
            for studentID, student in studentlist.items():
                print(student)
            return (self.menulist())

    
    #search specific student
    def option3(self):
        while True:
            searchstudent = str(input("Insert studentID that you like to search (or press 'q' to quit): "))
            if searchstudent.lower() == "q":
                return (self.menulist())
            
            # Check if the studentID exists in the dictionary
            if searchstudent in studentlist:
                student = studentlist[searchstudent] 
                print(f"\nStudent ID: {student.studentID}")
                print(student)
                
            else:
                print ("The studentID you search for is not in the list")
                return (self.menulist())
    
    #edit student score
    def option4 (self):
        while True:
            searchstudent = str(input("Insert studentID that you like to edit (or press 'q' to quit): "))
            if searchstudent.lower() == "q":
                return (self.menulist())

            # Check if the studentID exists in the dictionary
            if searchstudent in studentlist:
                student = studentlist[searchstudent] 
                print(f"\nStudent ID: {student.studentID}")
                print(student)
            
                student.studentID = input(f"Input studentID (or press Enter to keep '{student.studentID}'): ") or student.studentID
                student.student_name = input(f"Input student name (or press Enter to keep '{student.student_name}'): ") or student.student_name
                
            #ensuring when editing score, there is no ValueError    
                while True:
                    try:
                        student.test_1 = int(input(f"New score for 1st test (or press Enter to keep '{student.test_1}'): ")) or student.test_1
                        break
                    except ValueError:
                        print ("Please enter a integar")    
                
                while True:
                    try:
                        student.assignment_1 = int(input(f"New score for 1st assignment (or press Enter to keep '{student.assignment_1}'): ")) or student.assignment_1
                        break
                    except ValueError:
                        print ("Please enter a integar")  
                        
                        
                while True:
                    try:
                        student.test_2 = int(input(f"New score for 2nd test (or press Enter to keep '{student.test_2}'): ")) or student.test_2
                        break
                    except ValueError:
                        print ("Please enter a integar")  
                        
                        
                while True:
                    try:
                        student.assignment_2 = int(input(f"New score for 2nd assignment (or press Enter to keep '{student.assignment_2}'): ")) or student.assignment_2
                        break
                    except ValueError:
                        print ("Please enter a integar")  
                        
                        
                while True:
                    try:
                        student.final_exam = int(input(f"New score for final exam (or press Enter to keep '{student.final_exam}'): ")) or student.final_exam
                        break
                    except ValueError:
                        print ("Please enter a integar")  
                
                 # Recalculate total mark and final grade to be reflected in graphs
                student.total_mark = student.calculate_total_mark()
                student.final_grade = student.grade_distribution()
                
                studentlist[student.studentID] = student
                print (f"Student {student.studentID} Score is Edited")
                return (self.menulist())
                       
            else:
                print ("The studentID you search for is not in the list")
                return (self.menulist())
    
    
    #delete student score
    def option5(self):
        while True:
            searchstudent = str(input("Insert studentID that you like to delete (or press 'q' to quit): "))
            if searchstudent.lower() == "q":
                return (self.menulist())
            
            # Check if the studentID exists in the dictionary
            if searchstudent in studentlist:
                student = studentlist[searchstudent] 
                print(f"\nStudent ID: {student.studentID}")
                
                #delete studentID from dictionary
                deletion = str(input(f"Are you sure you want to delete {student.studentID} permanently? (Y/N)"))
                if deletion.lower() == "y":
                    del studentlist[searchstudent]
                    print (f"{student.studentID} has been removed")    
                elif deletion.lower() == "n":
                    print (f"Not deleting {student.studentID}. Going back to main menu")
                    return (self.menulist())
            
            #note to check if there are ways to shorten or combine these few functions. Seems repeating
            else:
                print ("The studentID you search for is not in the list")
                return (self.menulist())
            
            
    #add new file
    def option6 (self):
        read_file = str(input("WARNING: File details will override any duplicate student scoring already in the programme. Do you still want to proceed? (Y/N)"))
        if read_file.lower() == "n":
            print ("Going back to main menu")
            return (self.menulist())
        elif read_file.lower() == "y":
            file_name = input("What is the file name you want to upload? (E.g., file.txt)")
            
            if not file_name.lower().endswith('.txt'):
                print("Error: Please provide a .txt file.")
                return self.option6()
            
            try:
                with open(file_name, 'r') as file_object:
                    for line in file_object:
                        data = line.strip().split(',')

                        studentID, student_name, test_1, assignment_1, test_2, assignment_2, final_exam = data
                        #above line is to assign data from file into variables
                        # Convert to appropriate data types from external file
                        studentID = str(studentID)
                        test_1 = int(test_1)
                        assignment_1 = int(assignment_1)
                        test_2 = int(test_2)
                        assignment_2 = int(assignment_2)
                        final_exam = int(final_exam)

                        # Create a PythonMarksheet object
                        student = PythonMarksheet(studentID, student_name, test_1, assignment_1, test_2, assignment_2, final_exam)

                        # Add to the dictionary
                        studentlist[studentID] = student
                    print ("File with student marksheet are uploaded.")
                    #go back to option2 so to print the entire list
                    return self.option2()

            #add this to prevent any error
            except FileNotFoundError:
                print("Error: The file was not found.")
                return self.option6()
            except IOError:
                print("Error: An Error occurred while trying to read the file.")
                return self.option6()
            except Exception:
                print("An unexpected error occurred")
                return self.option6()
            
        else:
            print ("Your action is not valid")
            return self.option6()
            
            
    #save marks into external file
    #need to see how to optimize it better for clarity
    #save list into file
    def option7 (self):
        save_file = str(input("WARNING: Saving this file will override all student information. Do you still want to proceed? (Y/N)"))
        if save_file.lower() == "n":
            print ("Going back to main menu")
            return (self.menulist())
        
        elif save_file.lower() == "y":
        #for user to choose the filename
            filename = str(input("Enter the filename to save the student data (e.g., 'myfile.txt'): "))

            # Ensure the filename has a proper extension
            if not filename.endswith('.txt'):
                filename += '.txt'

            try:
                with open(filename, 'w') as file_object:
                    for studentID, student in studentlist.items():
                        line = f"{student.studentID},{student.student_name},{student.test_1},{student.assignment_1},{student.test_2},{student.assignment_2},{student.final_exam}\n"
                        file_object.write(line)
                print(f"File saved as '{filename}' in your current directory")
        
            except IOError:
                print("An error occurred while saving the file")

            return self.menulist()
    
        else:
            print ("Your action is not valid")
            return self.option7()
    
    
    def option8(self):
        graphques = str(input("What graphs do you want to create?\n 1.Grade Distribution Table\n 2.Histogram\n 3.Back to Main Menu\n"))

        if graphques == "1":
            # Create Grade Distribution Table
            grade_dist = {"F": 0, 
                          "PS2": 0, 
                          "PS1": 0, 
                          "CR2": 0, 
                          "CR1": 0, 
                          "DI2": 0, 
                          "DI1": 0, 
                          "HD2": 0, 
                          "HD1": 0
                         }

            # Loop through the studentlist to populate the grade distribution
            for student in studentlist.values():
                grade_dist[student.final_grade] += 1

            print("\nGrade Distribution Table")
            print("------------------------")
            for grade, count in grade_dist.items():
                print(f"{grade}: {count} students")
                print("------------------------")
            return self.menulist()

        elif graphques == "2":
            #Create Histogram Consist of Final Marks
            #cant do final grade as histogram is for categorical data
            final_marks = []
            for student in studentlist.values():
                final_marks.append (student.total_mark) # Collect final marks

            # Create the histogram for final marks
            plt.figure(figsize=(10, 6))
            plt.hist(final_marks, bins=20, color="blue", edgecolor="black", rwidth=1)
            plt.title('Histogram of Student Final Marks')
            plt.xlabel('Marks')
            plt.ylabel('Number of Students')
            plt.show()

            return self.menulist()
        
        elif graphques == "3":
            return self.menulist()
        
        else:
            print("Your input is not valid. Please try again.")
            return self.option8()

        
    def option9(self):
        print ("Thank you for using Ivan's programme. See you again!")


    
    # Method to calculate the total mark based on the formula
    # Below here are all the processing action, not the option function
    def calculate_total_mark(self):
        total_mark = (self.test_1 / 10 + self.assignment_1 / 10 +
                      self.test_2 / 10 + self.assignment_2 / 10 +
                      self.final_exam / 10 * 6)
        return total_mark

    # Method to calculate and return the grade distribution
    def grade_distribution(self):
        if self.total_mark < 50:
            return "F"
        elif self.total_mark < 55:
            return "PS2"
        elif self.total_mark < 60:
            return "PS1"
        elif self.total_mark < 65:
            return "CR2"
        elif self.total_mark < 70:
            return "CR1"
        elif self.total_mark < 75:
            return "DI2"
        elif self.total_mark < 80:
            return "DI1"
        elif self.total_mark < 85:
            return "HD2"
        else:
            return "HD1"
        
        
    # __str__ method for easy printing
    def __str__(self):
        return (f"Student ID: {self.studentID}, Name: {self.student_name}, "
                f"Test 1: {self.test_1}, Assignment 1: {self.assignment_1}, "
                f"Test 2: {self.test_2}, Assignment 2: {self.assignment_2}, "
                f"Final Exam: {self.final_exam}, Total Marks: {self.total_mark:.2f}, "
                f"Final Grade: {self.final_grade}")


    #here is the menu edit list
    def menulist(self):
        print ("Op 1: Add Student")
        print ("Op 2: Print All Student List")
        print ("Op 3: Search Student Score")
        print ("Op 4: Edit Student Score")
        print ("Op 5: Delete Student Score")
        print ("Op 6: Upload Marks from External 'txt' File")
        print ("Op 7: Save Marks into External 'txt' File")
        print ("Op 8: Show Charts")
        print ("Op 9: End Programme")
        
        
        while True:
            try:
                choices = int(input ("What is your choices"))
                if choices == 1:
                    return self.option1()
                elif choices == 2:
                    return self.option2()
                elif choices == 3:
                    return self.option3() 
                elif choices == 4:
                    return self.option4()
                elif choices == 5:
                    return self.option5()
                elif choices == 6:
                    return self.option6()
                elif choices == 7:
                    return self.option7()
                elif choices == 8:
                    return self.option8()
                elif choices == 9:
                    return self.option9() #this will go to option 9, which will then go back to menu
                else:
                    print ("Your choice is not in this menu. Please try again.")
                    return marksheet.menulist()
            except ValueError:
                print("Please enter an integar")
                return marksheet.menulist()
    
#To run the Menu   
marksheet = PythonMarksheet(0, "", 0, 0, 0, 0, 0)
marksheet.menulist()
